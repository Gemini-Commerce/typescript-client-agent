/* tslint:disable */
/* eslint-disable */
/**
 * agent/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentAgentEntity,
  AgentCreateAgentRequest,
  AgentListAgentsRequest,
  AgentListResponse,
  AgentUpdateAgentRequest,
  RpcStatus,
} from '../models/index';
import {
    AgentAgentEntityFromJSON,
    AgentAgentEntityToJSON,
    AgentCreateAgentRequestFromJSON,
    AgentCreateAgentRequestToJSON,
    AgentListAgentsRequestFromJSON,
    AgentListAgentsRequestToJSON,
    AgentListResponseFromJSON,
    AgentListResponseToJSON,
    AgentUpdateAgentRequestFromJSON,
    AgentUpdateAgentRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface AgentCreateAgentOperationRequest {
    tenantId: string;
    body: AgentCreateAgentRequest;
}

export interface AgentGetAgentRequest {
    tenantId: string;
    id: string;
}

export interface AgentListAgentsOperationRequest {
    tenantId: string;
    pageSize: number;
    body: AgentListAgentsRequest;
}

export interface AgentUpdateAgentOperationRequest {
    tenantId: string;
    id: string;
    body: AgentUpdateAgentRequest;
}

/**
 * 
 */
export class AgentApi extends runtime.BaseAPI {

    /**
     */
    async agentCreateAgentRaw(requestParameters: AgentCreateAgentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentAgentEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling agentCreateAgent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling agentCreateAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/agent/create`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentCreateAgentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentAgentEntityFromJSON(jsonValue));
    }

    /**
     */
    async agentCreateAgent(requestParameters: AgentCreateAgentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentAgentEntity> {
        const response = await this.agentCreateAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agentGetAgentRaw(requestParameters: AgentGetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentAgentEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling agentGetAgent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling agentGetAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/agent/{id}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentAgentEntityFromJSON(jsonValue));
    }

    /**
     */
    async agentGetAgent(requestParameters: AgentGetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentAgentEntity> {
        const response = await this.agentGetAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agentListAgentsRaw(requestParameters: AgentListAgentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling agentListAgents.');
        }

        if (requestParameters.pageSize === null || requestParameters.pageSize === undefined) {
            throw new runtime.RequiredError('pageSize','Required parameter requestParameters.pageSize was null or undefined when calling agentListAgents.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling agentListAgents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/agent/list/page-size/{pageSize}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"pageSize"}}`, encodeURIComponent(String(requestParameters.pageSize))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentListAgentsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentListResponseFromJSON(jsonValue));
    }

    /**
     */
    async agentListAgents(requestParameters: AgentListAgentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse> {
        const response = await this.agentListAgentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agentUpdateAgentRaw(requestParameters: AgentUpdateAgentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentAgentEntity>> {
        if (requestParameters.tenantId === null || requestParameters.tenantId === undefined) {
            throw new runtime.RequiredError('tenantId','Required parameter requestParameters.tenantId was null or undefined when calling agentUpdateAgent.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling agentUpdateAgent.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling agentUpdateAgent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/{tenantId}/agent/{id}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters.tenantId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentUpdateAgentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentAgentEntityFromJSON(jsonValue));
    }

    /**
     */
    async agentUpdateAgent(requestParameters: AgentUpdateAgentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentAgentEntity> {
        const response = await this.agentUpdateAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
