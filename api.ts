/* tslint:disable */
/* eslint-disable */
/**
 * agent/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AgentAgentEntity
 */
export interface AgentAgentEntity {
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentAgentEntity
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface AgentCreateAgentRequest
 */
export interface AgentCreateAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof AgentCreateAgentRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentCreateAgentRequest
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentCreateAgentRequest
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentCreateAgentRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentCreateAgentRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentCreateAgentRequest
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface AgentListAgentsRequest
 */
export interface AgentListAgentsRequest {
    /**
     * 
     * @type {string}
     * @memberof AgentListAgentsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {Array<ListRequestSort>}
     * @memberof AgentListAgentsRequest
     */
    'sorts'?: Array<ListRequestSort>;
    /**
     * 
     * @type {string}
     * @memberof AgentListAgentsRequest
     */
    'filtersMask'?: string;
    /**
     * 
     * @type {ListRequestFilters}
     * @memberof AgentListAgentsRequest
     */
    'filters'?: ListRequestFilters;
}
/**
 * 
 * @export
 * @interface AgentListResponse
 */
export interface AgentListResponse {
    /**
     * 
     * @type {Array<AgentAgentEntity>}
     * @memberof AgentListResponse
     */
    'agents'?: Array<AgentAgentEntity>;
    /**
     * 
     * @type {string}
     * @memberof AgentListResponse
     */
    'pageToken'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AgentSortOrder = {
    Desc: 'DESC',
    Asc: 'ASC'
} as const;

export type AgentSortOrder = typeof AgentSortOrder[keyof typeof AgentSortOrder];


/**
 * 
 * @export
 * @interface AgentUpdateAgentRequest
 */
export interface AgentUpdateAgentRequest {
    /**
     * 
     * @type {AgentUpdatePayload}
     * @memberof AgentUpdateAgentRequest
     */
    'payload'?: AgentUpdatePayload;
    /**
     * 
     * @type {string}
     * @memberof AgentUpdateAgentRequest
     */
    'payloadMask'?: string;
}
/**
 * 
 * @export
 * @interface AgentUpdatePayload
 */
export interface AgentUpdatePayload {
    /**
     * 
     * @type {string}
     * @memberof AgentUpdatePayload
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentUpdatePayload
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentUpdatePayload
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgentUpdatePayload
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface ListRequestFilters
 */
export interface ListRequestFilters {
    /**
     * 
     * @type {Array<string>}
     * @memberof ListRequestFilters
     */
    'email'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListRequestFilters
     */
    'lastname'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ListRequestFilters
     */
    'code'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ListRequestSort
 */
export interface ListRequestSort {
    /**
     * 
     * @type {number}
     * @memberof ListRequestSort
     */
    'evaluationOrder'?: number;
    /**
     * 
     * @type {SortSortField}
     * @memberof ListRequestSort
     */
    'field'?: SortSortField;
    /**
     * 
     * @type {AgentSortOrder}
     * @memberof ListRequestSort
     */
    'order'?: AgentSortOrder;
}


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SortSortField = {
    Unknown: 'UNKNOWN',
    Date: 'DATE',
    Lastname: 'LASTNAME'
} as const;

export type SortSortField = typeof SortSortField[keyof typeof SortSortField];



/**
 * AgentApi - axios parameter creator
 * @export
 */
export const AgentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tenantId 
         * @param {AgentCreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentCreateAgent: async (tenantId: string, body: AgentCreateAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('agentCreateAgent', 'tenantId', tenantId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('agentCreateAgent', 'body', body)
            const localVarPath = `/v1/{tenantId}/agent/create`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentGetAgent: async (tenantId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('agentGetAgent', 'tenantId', tenantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentGetAgent', 'id', id)
            const localVarPath = `/v1/{tenantId}/agent/{id}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {number} pageSize 
         * @param {AgentListAgentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentListAgents: async (tenantId: string, pageSize: number, body: AgentListAgentsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('agentListAgents', 'tenantId', tenantId)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('agentListAgents', 'pageSize', pageSize)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('agentListAgents', 'body', body)
            const localVarPath = `/v1/{tenantId}/agent/list/page-size/{pageSize}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"pageSize"}}`, encodeURIComponent(String(pageSize)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {string} id 
         * @param {AgentUpdateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentUpdateAgent: async (tenantId: string, id: string, body: AgentUpdateAgentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('agentUpdateAgent', 'tenantId', tenantId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('agentUpdateAgent', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('agentUpdateAgent', 'body', body)
            const localVarPath = `/v1/{tenantId}/agent/{id}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentApi - functional programming interface
 * @export
 */
export const AgentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tenantId 
         * @param {AgentCreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentCreateAgent(tenantId: string, body: AgentCreateAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentAgentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentCreateAgent(tenantId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AgentApi.agentCreateAgent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentGetAgent(tenantId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentAgentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentGetAgent(tenantId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AgentApi.agentGetAgent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {number} pageSize 
         * @param {AgentListAgentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentListAgents(tenantId: string, pageSize: number, body: AgentListAgentsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentListAgents(tenantId, pageSize, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AgentApi.agentListAgents']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {string} id 
         * @param {AgentUpdateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async agentUpdateAgent(tenantId: string, id: string, body: AgentUpdateAgentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentAgentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.agentUpdateAgent(tenantId, id, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AgentApi.agentUpdateAgent']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AgentApi - factory interface
 * @export
 */
export const AgentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tenantId 
         * @param {AgentCreateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentCreateAgent(tenantId: string, body: AgentCreateAgentRequest, options?: any): AxiosPromise<AgentAgentEntity> {
            return localVarFp.agentCreateAgent(tenantId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentGetAgent(tenantId: string, id: string, options?: any): AxiosPromise<AgentAgentEntity> {
            return localVarFp.agentGetAgent(tenantId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {number} pageSize 
         * @param {AgentListAgentsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentListAgents(tenantId: string, pageSize: number, body: AgentListAgentsRequest, options?: any): AxiosPromise<AgentListResponse> {
            return localVarFp.agentListAgents(tenantId, pageSize, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tenantId 
         * @param {string} id 
         * @param {AgentUpdateAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentUpdateAgent(tenantId: string, id: string, body: AgentUpdateAgentRequest, options?: any): AxiosPromise<AgentAgentEntity> {
            return localVarFp.agentUpdateAgent(tenantId, id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentApi - object-oriented interface
 * @export
 * @class AgentApi
 * @extends {BaseAPI}
 */
export class AgentApi extends BaseAPI {
    /**
     * 
     * @param {string} tenantId 
     * @param {AgentCreateAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentCreateAgent(tenantId: string, body: AgentCreateAgentRequest, options?: RawAxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentCreateAgent(tenantId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentGetAgent(tenantId: string, id: string, options?: RawAxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentGetAgent(tenantId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenantId 
     * @param {number} pageSize 
     * @param {AgentListAgentsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentListAgents(tenantId: string, pageSize: number, body: AgentListAgentsRequest, options?: RawAxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentListAgents(tenantId, pageSize, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {AgentUpdateAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentApi
     */
    public agentUpdateAgent(tenantId: string, id: string, body: AgentUpdateAgentRequest, options?: RawAxiosRequestConfig) {
        return AgentApiFp(this.configuration).agentUpdateAgent(tenantId, id, body, options).then((request) => request(this.axios, this.basePath));
    }
}



